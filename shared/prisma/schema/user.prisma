model User {
  email                       String        @unique @db.VarChar(255)
  phone                       String?       @unique @db.VarChar(32)
  name                        String?       @db.VarChar(255)
  //UserRoleEnum
  role                        String
  loanRequests                LoanRequest[] @relation("requestor")
  loanRequestsCustomerSupport LoanRequest[] @relation("customerSupport")
  companyId                   String?
  company                     Company?      @relation(fields: [companyId], references: [id])
  //UserStatusEnum

  isAssignableToLoanRequest Boolean @default(false)

  status        String         @default("ACTIVE")
  refreshTokens RefreshToken[]
  apiTokens     APIToken[]
  waUser        WaUser?
  cccd          String?
  shortUrls     ShortUrl[]

  sentMessages WaMessage[]

  lastLoginAt DateTime?

  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  activityLogs     ActivityLog[]
  AffiliateLink    AffiliateLink[]
  AffiliateVisitor AffiliateVisitor[]

  userSettings UserSettings?
  VisitorData  VisitorData[]

  zohoCrmId String?

  @@schema("public")
}

model RefreshToken {
  token     String   @unique
  expiresAt DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])

  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
  @@schema("public")
}

model APIToken {
  name  String
  token String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id])

  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}

model ShortUrl {
  code         String   @unique @db.VarChar(32)
  targetUrl    String?  @db.Text
  // Type can be REDIRECT or API_ACCESS
  type         String   @db.VarChar(32)
  // For API_ACCESS type, specify which endpoints are allowed
  allowedPaths String[]

  userId        String?
  user          User?           @relation(fields: [userId], references: [id])
  // Optional expiration date
  expiresAt     DateTime?
  // Track usage
  useCount      Int             @default(0)
  lastUsedAt    DateTime?
  AffiliateLink AffiliateLink[]

  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}

model OTP {
  otp       String
  email     String   @unique
  expiresAt DateTime

  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@schema("public")
}

model UserSettings {
  userEmail String @unique
  user      User   @relation(fields: [userEmail], references: [email])

  emailNotificationsDisabled Boolean @default(false)
  autoReapplyDisabled        Boolean @default(false)

  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}
