model LoanRequest {
  //LoanRequestStatusEnum
  status  String @default("ACTIVE")
  country String @db.VarChar(2)
  type    String @default("GENERAL")

  //Amount currency depends on the country
  amount  Float
  //Months
  term    Int
  purpose String

  loanResponses LoanResponse[]

  applicantInfoId String?        @unique
  applicantInfo   ApplicantInfo? @relation(fields: [applicantInfoId], references: [id], name: "applicantInfo")

  guarantorInfoId String?        @unique
  guarantorInfo   ApplicantInfo? @relation(fields: [guarantorInfoId], references: [id], name: "guarantorInfo")

  userId String
  user   User   @relation(fields: [userId], references: [id], name: "requestor")

  customerSupportId String?
  customerSupport   User?   @relation(fields: [customerSupportId], references: [id], name: "customerSupport")

  deletionReason String?

  //to be replaced with supportData
  isFavorite   Boolean @default(false)
  isSpam       Boolean @default(false)
  isLowQuality Boolean @default(false)

  approvedAt  DateTime?
  publicNote  String?
  privateNote String?

  supportData Json?

  grading LoanRequestGrading?
  referer String?

  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  affiliateVisitorId String?
  affiliateVisitor   AffiliateVisitor[]

  activityLogs  ActivityLog[]
  notifications Notification[]

  isAutoReapply Boolean @default(false)

  @@schema("public")
}

model LoanRequestGrading {
  loanRequestId String       @unique
  loanRequest   LoanRequest? @relation(fields: [loanRequestId], references: [id])

  //MlcbGradeEnum
  mlcbGrade String?
  //LeadTierEnum
  leadTier  String?

  mlcbReport Json?

  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}

model LoanResponse {
  loanRequestId    String
  loanRequest      LoanRequest  @relation(fields: [loanRequestId], references: [id])
  lenderId         String
  lender           Company      @relation(fields: [lenderId], references: [id])
  //LoanResponseStatusEnum
  status           String       @default("SUBMITTED")
  comment          String?
  //Is auto IPA or manually created
  isAuto           Boolean?
  appointment      Appointment?
  //StatusEnum
  outcomeStatus    String       @default("PENDING")
  loanOffer        LoanOffer?   @relation(name: "loanResponse")
  closedDealOffer  LoanOffer?   @relation(name: "closedDealOffer")
  rejectionReasons String[]
  disbursementDate DateTime?

  //Select offer status
  acceptedAt            DateTime?
  contactedByBorrowerAt DateTime?
  contactedByLenderAt   DateTime?

  supportData Json?

  invoiceId String?
  invoice   InvoicesData? @relation(fields: [invoiceId], references: [id])

  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([lenderId, loanRequestId])
  @@schema("public")
}

model Appointment {
  openingHoursId String?
  openingHours   OpeningHours? @relation(fields: [openingHoursId], references: [id])

  // the time of the appointment. Optional for stores without scheduling information
  scheduledTime  DateTime?
  loanResponseId String       @unique
  loanResponse   LoanResponse @relation(fields: [loanResponseId], references: [id])

  //AppointmentStatusEnum
  status String @default("REQUESTED_BY_BORROWER")

  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cancelledAt DateTime?

  @@schema("public")
}

model LoanOffer {
  loanResponseId      String?       @unique
  loanResponse        LoanResponse? @relation(fields: [loanResponseId], references: [id], onDelete: Cascade, name: "loanResponse")
  amount              Float
  term                Int
  monthlyInterestRate Float
  fixedUpfrontFees    Float         @default(0)
  variableUpfrontFees Float         @default(0)

  closedLoanResponseId String?       @unique
  closedLoanResponse   LoanResponse? @relation(fields: [closedLoanResponseId], references: [id], name: "closedDealOffer")

  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}

model InvoicesData {
  loanRequest LoanResponse[]

  zohoInvoiceData Json?

  sentAt DateTime?
  paidAt DateTime?

  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}

model Document {
  filename     String  @unique
  //DocumentTypeEnum
  documentType String
  isDeleted    Boolean @default(false)

  applicantInfoId String
  applicantInfo   ApplicantInfo @relation(fields: [applicantInfoId], references: [id])

  //VerificationStatusEnum
  humanVerificationStatus String @default("NOT_VERIFIED")
  ocrVerificationStatus   String @default("NOT_VERIFIED")
  // DocumentMetadata DocumentMetadata[]

  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}

// model DocumentMetadata {
//   documentId String   @unique
//   document   Document @relation(fields: [documentId], references: [id])

//   extractedData Json?

//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   @@schema("public")
// }

//Not used for now
